THis code mearge to different codes which is 
Home Activity after login and attaindance for check in



import 'package:flutter/material.dart';
import 'package:fluttertoast/fluttertoast.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';

import 'package:login_and_userdetails_api/user_session/User.dart' as UserSession;
import 'package:login_and_userdetails_api/user_session/User.dart';
import 'package:login_and_userdetails_api/user_session/attendance.dart';
import 'package:shared_preferences/shared_preferences.dart';

import 'main.dart';
import 'menu_activity/ProfilePage.dart';

class HomePage extends StatefulWidget {
  final String mobileNumber;
  HomePage({required this.mobileNumber});



  @override
  _HomePageState createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> {
  List<User> users = [];
  User? userInfo;
  bool isLoading = false;


  Future<void> fetchUsers() async {
    setState(() {
      isLoading = true;
    });

    http.Response response = await http.get(
      Uri.parse("https://api.trifrnd.com/portal/Attend.php?apicall=readall"),
    );

    setState(() {
      isLoading = false;
    });

    if (response.statusCode == 200) {
      List<dynamic> data = json.decode(response.body);
      List<User> userList = data.map((item) => UserSession.User(
        id: item['id'],
        fname: item['fname'],
        lname: item['lname'],
        empId: item['EmpId'],
        email: item['email'],
        mobile: item['mobile'],
        departmentName: item['department_name'],
      )).toList();

      setState(() {
        users = userList;
        userInfo = users.firstWhere(
              (user) => user.mobile == widget.mobileNumber,
          orElse: () => UserSession.User(
            id: '',
            fname: '',
            lname: '',
            empId: '',
            email: '',
            mobile: '',
            departmentName: '',
          ),
        );
      });
    } else {
      // Handle error if the API call was not successful
      print("API call failed");
      Fluttertoast.showToast(
        msg: "Server Connection Error!",
        toastLength: Toast.LENGTH_SHORT,
        backgroundColor: Colors.red,
        textColor: Colors.white,
      );
    }
  }

  // Add a method to navigate to AttendanceApp
  void navigateToAttendanceApp() {
    Navigator.of(context).push(
      MaterialPageRoute(
        builder: (context) => AttendanceApp(mobileNumber: widget.mobileNumber),
      ),
    );
  }

  @override
  void initState() {
    fetchUsers();
    super.initState();
  }
  

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        centerTitle: true,
        title: Text("HOME"),
        actions: <Widget>[
          PopupMenuButton(
            itemBuilder: (BuildContext context) {
              return [
                // Menu Display User Name
                PopupMenuItem(
                  child: ListTile(
                    title: Text('Welcome ${userInfo?.fname ?? ''}', style: TextStyle(fontWeight: FontWeight.bold)),
                  ),
                ),
                // MENU Profile button
                PopupMenuItem(
                  child: ListTile(
                    title: Text('Profile', style: TextStyle(color: Colors.red)),
                    onTap: () async {
                      final prefs = await SharedPreferences.getInstance();
                      await prefs.remove('userName'); // Clear the stored user name
                      Navigator.pushReplacement(context,
                          MaterialPageRoute(builder: (context) =>  ProfilePage(loggedInUser: userInfo!)));
                    },
                  ),
                ),
                // Menu Logout Button
                PopupMenuItem(
                  child: ListTile(
                    title: Text('Logout', style: TextStyle(color: Colors.red)),
                    onTap: () async {
                      final prefs = await SharedPreferences.getInstance();
                      await prefs.remove('userName'); // Clear the stored user name
                      Navigator.pushReplacement(context, MaterialPageRoute(builder: (context) => LoginApp()));
                    },
                  ),
                ),
              ];
            },
            icon: Icon(Icons.more_vert), // This is the menu icon
          ),
        ],
      ),
      body: Center(
        child: isLoading
            ? CircularProgressIndicator()
            : Column(
          mainAxisAlignment: MainAxisAlignment.start,
          crossAxisAlignment: CrossAxisAlignment.center,
          children: [
            // Menu Display User Name
            userInfo != null
                ? Column(
              children: [
                SizedBox(height: 20),
                Text('Welcome: ${userInfo!.fname} ${userInfo!.lname}'),
                ElevatedButton(
                  onPressed: navigateToAttendanceApp,
                  child: Text('Go to Attendance'),
                ),

              ],
            )
                : Text("User not found."),
          ],
        ),
      ),
    );
  }
}


// ____________________________________ Attendence COde ___________________________________________


class AttendanceApp extends StatefulWidget {
  final String mobileNumber;
  AttendanceApp({required this.mobileNumber});

  @override
  _AttendanceAppState createState() => _AttendanceAppState();
}

class _AttendanceAppState extends State<AttendanceApp> {
  final TextEditingController mobileController = TextEditingController();
  final TextEditingController dateController = TextEditingController();
  String intime = '';
  String result = '';
  List<AttendanceRecord> attendanceRecords = [];

  Future<void> markAttendance() async {
    final url = Uri.parse('https://api.trifrnd.com/portal/attend.php?apicall=checkin');
    final response = await http.post(
      url,
      body: {
        'mobile': widget.mobileNumber, // Use the passed mobile number
        'date': dateController.text,
        'intime': intime,
      },
    );

    String attendanceResult = '';

    if (response.statusCode == 200) {
      attendanceResult = '${response.body}';
    } else {
      attendanceResult = 'Failed to mark attendance: ${response.body}';
    }

    setState(() {
      result = attendanceResult;
      attendanceRecords.add(AttendanceRecord(
        mobile: widget.mobileNumber, // Use the passed mobile number
        date: dateController.text,
        intime: intime,
        result: attendanceResult,
      ));
      final now = DateTime.now();
      intime = '${now.hour}:${now.minute}:${now.second}';
    });
  }

  @override
  void initState() {
    super.initState();
    final now = DateTime.now();
    intime = '${now.hour}:${now.minute}:${now.second}';
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        centerTitle: true,
        title: Text('Attendance App'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          children: [
            TextFormField(
              controller: dateController,
              decoration: InputDecoration(labelText: 'Date (YYYY-MM-DD)'),
              keyboardType: TextInputType.datetime,
            ),
            SizedBox(height: 16.0),
            ElevatedButton(
              onPressed: markAttendance,
              child: Text('Mark Attendance'),
            ),
            SizedBox(height: 16.0),
            Text('Intime: $intime'),
            SizedBox(height: 16.0),
            Text('Result: $result'),
            SizedBox(height: 16.0),
            Text('Attendance Records:'),
            Expanded(
              child: ListView.builder(
                itemCount: attendanceRecords.length,
                itemBuilder: (context, index) {
                  final record = attendanceRecords[index];
                  return ListTile(
                    title: Text('Mobile: ${record.mobile}'),
                    subtitle: Text('Date: ${record.date}\nIntime: ${record.intime}\nResult: ${record.result}'),
                  );
                },
              ),
            ),
          ],
        ),
      ),
    );
  }
}